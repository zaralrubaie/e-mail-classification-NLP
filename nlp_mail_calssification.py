# -*- coding: utf-8 -*-
"""NLP-mail calssification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AnrFUkYDVlqrxexveFLsCPVryL4C6H67
"""

import pandas as pd
import re
import spacy
df_test=pd.read_csv('/kaggle/input/email-classification-nlp/SMS_test.csv',encoding='latin-1')
df_train=pd.read_csv('/kaggle/input/email-classification-nlp/SMS_train.csv',encoding='latin-1')
df_train.head(10)

df_test=df_test.drop(['S. No.'],axis=1)
df_train=df_train.drop(['S. No.'],axis=1)

def find_non_ascii(text):
    return ''.join([char for char in text if ord(char) > 127])
df_train["weird_chars"] = df_train["Message_body"].apply(find_non_ascii)
df_train[df_train["weird_chars"] != ""]

def clean_ascii(text):
    return text.encode("ascii", "ignore").decode("ascii")

import re

def clean_ascii_extended(text):
    text = text.encode("ascii", "ignore").decode("ascii")
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text
df_train["Cleaned_Message"] = df_train["Message_body"].apply(clean_ascii_extended)
df_test["Cleaned_Message"] = df_test["Message_body"].apply(clean_ascii_extended)

!pip install contractions

from spacy.lang.en.stop_words import STOP_WORDS

nlp = spacy.load("en_core_web_sm", disable=["parser", "ner"])

slang_dict = {
    "u": "you",
    "ur": "your",
    "lol": "laughing",
    "btw": "by the way",
    "idk": "I do not know",
    "imo": "in my opinion",
    "wanna": "want to",
    "gonna": "going to",
    "lei": "",
    "lor": "",
    "fr": "for",
    "b4": "before",
    # add more here
}

def clean_text(text):
    # ASCII encode/decode
    text = text.encode("ascii", "ignore").decode("ascii")
    # Lowercase
    text = text.lower()
    # Remove URLs
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    # Remove punctuation & special chars
    text = re.sub(r'[^a-z\s]', ' ', text)
    # Replace multiple spaces
    text = re.sub(r'\s+', ' ', text).strip()
    # Replace slang
    words = text.split()
    words = [slang_dict.get(word, word) for word in words]
    text = " ".join(words)
    # Remove stopwords using SpaCy
    doc = nlp(text)
    tokens = [token.text for token in doc if token.text not in STOP_WORDS and len(token.text) > 2]
    return " ".join(tokens)

df_train['Cleaned_Message'] = df_train['Message_body'].apply(clean_text)
df_test['Cleaned_Message'] = df_test['Message_body'].apply(clean_text)

def spacy_lemmatize(text):
    doc = nlp(text)
    return " ".join([
        token.lemma_ for token in doc
        if token.lemma_ not in STOP_WORDS and token.is_alpha
    ])

df_train['Final_Text'] = df_train['Cleaned_Message'].apply(spacy_lemmatize)
df_test['Final_Text'] = df_test['Cleaned_Message'].apply(spacy_lemmatize)

from sklearn.feature_extraction.text import TfidfVectorizer

corpus = df_train['Final_Text'].tolist()

tfidf = TfidfVectorizer(
    max_features=5000,
    ngram_range=(1, 2),
    stop_words='english',
    min_df=5,
    max_df=0.7
)

X_train_tfidf = tfidf.fit_transform(corpus)
X_test_tfidf = tfidf.transform(df_test['Final_Text'].tolist())

df_train['Label'].value_counts()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df_train['Label'] = le.fit_transform(df_train['Label'])
df_test['Label'] = le.transform(df_test['Label'])

df_test = df_test.drop(['Message_body', 'Cleaned_Message'], axis=1)

df_train = df_train.drop(['Message_body', 'weird_chars', 'Cleaned_Message'], axis=1)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

model = LogisticRegression(max_iter=1000)


model.fit(X_train_tfidf, df_train['Label'])

y_pred = model.predict(X_test_tfidf)

print(classification_report(df_test['Label'], y_pred))
print("Accuracy:", accuracy_score(df_test['Label'], y_pred))

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import StratifiedKFold, cross_val_score
model = LogisticRegression(max_iter=1000)

skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

X = tfidf.transform(df_train['Final_Text'])
y = df_train['Label']

scores = cross_val_score(model, X, y, cv=skf, scoring='accuracy')

print("Cross-validation accuracy scores:", scores)
print("Mean accuracy:", scores.mean())

from sklearn.linear_model import LogisticRegression
best_model = LogisticRegression(C=100, max_iter=1000)

best_model.fit(X_train_tfidf, df_train['Label'])

X_test = tfidf.transform(df_test['Final_Text'])
y_test = df_test['Label']

test_accuracy = best_model.score(X_test, y_test)
print("Test accuracy:", test_accuracy)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, df_train['Label'])

y_pred = model.predict(X_test_tfidf)

prediction_df = pd.DataFrame({
    'Final_Text': df_test['Final_Text'],
    'Actual_Label': df_test['Label'],
    'Predicted_Label': y_pred,
    'Correct': df_test['Label'] == y_pred
})

prediction_df.head(10)

prediction_df.to_csv('predictions_logistic_regression.csv', index=False)